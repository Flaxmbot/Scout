rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             resource.data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Products - public read, admin write
    match /products/{productId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }

    // Categories - public read, admin write
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }

    // Cart Items - users can manage their own cart items
    match /cartItems/{cartItemId} {
      allow read, write: if isAuthenticated() && 
                            (resource.data.sessionId == request.auth.uid ||
                             resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
    }

    // Orders - customers can read their own orders, admin can read/write all
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                     (resource.data.customerEmail == request.auth.token.email ||
                      isAdmin());
      allow write: if isAdmin();
      allow create: if isAuthenticated();

      // Order items subcollection
      match /items/{itemId} {
        allow read: if isAuthenticated() && 
                       (get(/databases/$(database)/documents/orders/$(orderId)).data.customerEmail == request.auth.token.email ||
                        isAdmin());
        allow write: if isAdmin();
        allow create: if isAuthenticated();
      }
    }

    // Users - users can read/update their own profile, admin can read all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
      allow create: if isAuthenticated();
    }

    // Customers - admin can read/write all, users can read/write their own
    match /customers/{customerId} {
      allow read, write: if isAuthenticated() && 
                            (resource.data.email == request.auth.token.email ||
                             isAdmin());
      allow create: if isAuthenticated();
    }

    // Analytics - admin only
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
  }
}